[project]
name = "foxtrot"
version = "0.1.0"
description = "Event-driven trading platform framework"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Chenxi Li", email = "chenxi.li08@outlook.com"},
]
maintainers = [
    {name = "Chenxi Li", email = "chenxi.li08@outlook.com"},
]
keywords = ["trading", "event-driven", "finance", "platform"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Office/Business :: Financial :: Investment",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Environment :: Console",
    "Environment :: X11 Applications :: Qt",
    "Operating System :: OS Independent",
]
requires-python = ">=3.10,<3.14"
dependencies = [
    "tzlocal>=5.3.1,<6.0",
    "PySide6>=6.8.2.1,<7.0",
    "pyqtgraph>=0.13.7,<1.0",
    "qdarkstyle>=3.2.3,<4.0",
    "numpy>=2.2.3,<3.0",
    "pandas>=2.2.3,<3.0",
    "ta-lib>=0.6.4,<1.0",
    "deap>=1.4.2,<2.0",
    "ccxt>=4.4.96,<5.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.4.1",
    "pytest-cov>=6.0.0",
    "black>=25.1.0",
    "ruff>=0.12.5",
    "mypy>=1.17.0",
]
test = [
    "pytest>=8.4.1",
    "pytest-cov>=6.0.0",
]
lint = [
    "black>=25.1.0",
    "ruff>=0.12.5",
    "mypy>=1.17.0",
]

# Console scripts for system-wide installation
[project.scripts]
foxtrot = "foxtrot.cli:main"
foxtrot-gui = "foxtrot.gui:main"

# Entry points for plugin system
[project.entry-points."foxtrot.adapters"]
ibrokers = "foxtrot.adapter.ibrokers:IBrokersAdapter"
crypto = "foxtrot.adapter.crypto:CryptoAdapter"

[project.entry-points."foxtrot.strategies"]
base = "foxtrot.strategy:BaseStrategy"

[project.urls]
Homepage = "https://github.com/chenxi-li/foxtrot"
Repository = "https://github.com/chenxi-li/foxtrot"
Documentation = "https://github.com/chenxi-li/foxtrot#readme"
"Bug Reports" = "https://github.com/chenxi-li/foxtrot/issues"

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

# Alternative Poetry build system (comment out the above and uncomment below if using Poetry)
# [build-system]
# requires = ["poetry-core>=1.0.0"]
# build-backend = "poetry.core.masonry.api"

# Setuptools configuration for system-wide installation
[tool.setuptools]
zip-safe = false
include-package-data = true

[tool.setuptools.packages.find]
where = ["."]
include = ["foxtrot*"]
exclude = ["tests*", "docs*", "examples*"]

[tool.setuptools.package-data]
foxtrot = [
    "*.json",
    "*.yaml",
    "*.yml",
    "*.toml",
    "*.cfg",
    "*.ini",
    "data/*",
    "config/*",
    "templates/*",
]

[tool.poetry]
name = "foxtrot"
version = "0.1.0"
description = "Event-driven trading platform framework"
authors = ["Chenxi Li <chenxi.li08@outlook.com>"]
readme = "README.md"
packages = [{include = "foxtrot"}]

[tool.poetry.dependencies]
python = ">=3.10,<3.14"
tzlocal = "^5.3.1"
PySide6 = "^6.8.2.1"
pyqtgraph = "^0.13.7"
qdarkstyle = "^3.2.3"
numpy = "^2.2.3"
pandas = "^2.2.3"
ta-lib = "^0.6.4"
deap = "^1.4.2"
ccxt = "^4.4.96"

[tool.poetry.group.dev.dependencies]
pytest = "^8.4.1"
pytest-cov = "^6.0.0"
black = "^25.1.0"
ruff = "^0.12.5"
mypy = "^1.17.0"

# Code formatting and linting configuration
[tool.black]
line-length = 100
target-version = ['py310', 'py311', 'py312', 'py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 100
target-version = "py310"
extend-exclude = [
    ".eggs",
    ".git",
    ".mypy_cache",
    ".ruff_cache",
    ".venv",
    "__pycache__",
    "build",
    "dist",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "PIE", # flake8-pie
    "SIM", # flake8-simplify
    "RET", # flake8-return
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "B905",  # zip without an explicit strict parameter
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["S101"]  # Allow assert statements in tests

[tool.ruff.lint.isort]
known-first-party = ["foxtrot"]
force-sort-within-sections = true

# Type checking configuration
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
show_error_codes = true
pretty = true
color_output = true

[[tool.mypy.overrides]]
module = [
    "ibapi.*",
    "ta.*",
    "ccxt.*",
    "deap.*",
]
ignore_missing_imports = true

# Testing configuration
[tool.pytest.ini_options]
minversion = "6.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--strict-config",
    "--cov=foxtrot",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["foxtrot"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]